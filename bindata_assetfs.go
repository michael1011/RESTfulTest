// Code generated by go-bindata.
// sources:
// public/index.html
// public/css/styles.css
// public/js/script.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x41\x6f\x13\x3d\x10\xbd\xe7\x57\xb8\x3e\x7d\x9f\x90\xd7\xa4\x48\x1c\xaa\xdd\x20\x01\x95\x40\x02\x81\xda\x72\xe0\x54\x6d\xec\xd9\xc4\x8d\xd7\x5e\x3c\xb3\x25\xf9\xf7\xc8\xf6\x96\x66\xa3\x0d\x0d\x70\xe0\x94\x9d\x19\xcf\x9b\x79\x6f\xec\x49\x79\xf6\xf6\xd3\x9b\x9b\xaf\x9f\x2f\xd9\x9a\x5a\xbb\x98\xcd\xca\x33\x21\x18\x79\xed\x2f\x18\x82\xd3\xcc\x3b\x06\x8e\x20\x30\x65\x8d\xda\xb0\x35\x51\x77\x21\x25\x52\xad\x36\xfe\x1e\x42\x63\xfd\xf7\x42\xf9\x56\x7e\xeb\x01\xc9\x78\x87\x72\xfe\xf2\xf9\x7c\xfe\x62\x7e\x2e\x61\x0b\xaa\x27\x10\x4d\xef\x54\x0c\x09\xef\x44\xc2\x12\x1b\xd8\x31\x21\x62\xb5\x87\xaa\x6b\xa8\xf5\x62\xc6\x18\x63\x25\x19\xb2\xb0\xb8\xba\xbc\xbe\x69\x7a\x7b\x03\x48\xa5\xcc\xae\x59\x8e\x5b\xe3\x36\x2c\x80\xad\x38\xd2\xce\x02\xae\x01\x88\xb3\x75\x80\xa6\xe2\x0a\x51\x66\x6f\xa1\x10\xf9\x29\x29\x91\x11\x5e\x48\xd9\x78\x47\x58\xac\xbc\x5f\x59\xa8\x3b\x83\x89\x95\x51\xde\xbd\x6a\xea\xd6\xd8\x5d\xf5\xb1\x26\x08\xa6\xb6\xcf\xde\x2b\xef\x22\xf6\xc9\xd0\xca\x6b\x28\x56\x40\xad\xb6\x85\xf1\x72\x5e\x9c\x17\x73\xd9\x0e\x70\x85\x0f\xb5\x5b\x81\x58\xda\x1e\x8a\xd6\xb8\xd4\x38\x93\x0f\xad\xa3\x0a\xa6\x23\x86\x41\x55\xfc\x0e\x65\x36\x8b\x3b\xe4\x8b\x72\x30\x16\xa3\x83\x1a\x1a\x08\xf9\xf8\x69\xe5\x63\xc9\x31\x5c\x29\xf3\x34\x66\xe5\xd2\xeb\xdd\x00\xaf\xcd\x3d\x53\xb6\x46\xac\xb8\xf2\x8e\x6a\xe3\x20\x0c\x1a\xa4\x78\xe3\x43\xfb\x68\x1e\xa6\xb4\xda\x0a\x82\x2d\x35\x06\xac\x66\xd1\xba\xc3\x47\x07\x1f\x27\xa6\x64\xe3\xba\x9e\x26\xd3\x6f\x6f\x53\x8c\x33\xda\x75\x50\xf1\xe8\xe7\xcc\xe8\x8a\xf7\xc1\x4e\x21\xd9\x7a\x09\xf6\x08\x52\x8a\x71\xd6\xf8\x30\xa4\x7f\xb9\xfa\x50\xca\xe4\x3d\x20\x23\xb5\xb9\x1f\x66\x32\x45\x10\xbb\x5a\xc1\x54\xf5\xbf\x11\xe1\xf7\x84\x88\xfd\x27\x1d\xe2\xd4\x8e\xa1\x9d\x2a\x46\xc6\x78\xed\xf5\x6e\x52\x8e\x63\x92\xfc\x2b\xca\xf1\xc2\x8e\xee\xe3\x1f\x91\x7e\x40\x79\x97\x7e\x9f\x22\xfe\x0b\x57\x29\xf3\x73\x98\x4d\x69\x92\xae\x0a\x53\x69\x13\x1e\x74\x5c\x2e\x7b\x22\xef\xf6\x5b\x1d\x3c\x83\x74\x7b\x56\xfe\x14\x22\xd4\x06\xe1\xa7\xb6\xc1\x74\x9d\x05\x01\x4d\x03\x6a\x78\x16\xf9\x20\x67\xde\xa5\x15\x5e\xf1\xb8\xd7\xff\xfb\x7f\x42\xac\x6b\x70\xfa\x80\x56\x4e\xde\x67\x36\x1e\xfa\x53\x6f\xa0\xec\x02\x4c\x28\xb8\x6d\xbb\xd4\x5b\x00\xec\xbc\x43\x88\xeb\x67\xdb\x76\x87\xa2\x8e\x92\xf7\x4b\x0f\xdf\xa5\xcc\x1b\x2a\xae\xac\xf4\x47\xf2\x23\x00\x00\xff\xff\x37\xaa\x76\x0f\xcf\x06\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 1743, mode: os.FileMode(420), modTime: time.Unix(1476281632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x41\x0e\x82\x30\x10\x45\xf7\x3d\xc5\xb8\x70\x67\x49\x35\x71\x83\x87\x21\x85\x8e\x30\x49\x3b\x6d\xea\x10\x31\xc6\xbb\x1b\x04\x89\x10\xb7\xf3\x5e\x7f\xff\x2f\x82\xf3\x5a\x70\x90\x2b\xa1\x77\x55\x45\x9c\x7a\x39\xa8\xed\xd9\xdb\x1a\xfd\xf6\x0c\x4f\x05\x00\x70\x27\x27\x5d\x09\x47\x63\xf6\xb0\xa3\x90\x62\x16\xcb\x72\x51\x2f\xa5\x8a\x26\xb2\x58\x62\xcc\xb3\x1b\x6c\x6e\x89\xb5\xc4\x34\x3e\xc8\x18\x26\xed\x96\x6c\x83\x7f\x94\xd3\x62\x34\xc8\xb2\xa4\x8c\x0d\xb4\xf5\xd4\x72\x09\x13\xf8\x48\x75\x74\x8f\x6f\x08\xb1\xee\x90\xda\x4e\x4a\x30\xab\x56\x3f\x7f\x8c\xc8\xf6\x12\x57\x7c\xc2\x83\x9e\x57\x9d\x0d\x86\xf5\xaa\x77\x00\x00\x00\xff\xff\xa1\xb7\xe9\xca\x32\x01\x00\x00")

func publicCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStylesCss,
		"public/css/styles.css",
	)
}

func publicCssStylesCss() (*asset, error) {
	bytes, err := publicCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/styles.css", size: 306, mode: os.FileMode(420), modTime: time.Unix(1476277546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x6b\xb4\x40\x0c\x86\xef\xfe\x8a\xe0\x45\x65\x65\xfe\xc0\x22\x1f\x7c\x20\xdd\x82\x7b\x29\x1e\x7a\x1d\x9c\x77\x5b\x61\x9a\xd1\x4c\x46\x5b\xca\xfe\xf7\xa2\xcb\x96\xbd\x34\xa7\x40\x92\xf7\x79\xc8\x25\xf1\xa0\x63\x60\x8a\x60\x57\x56\xf4\x9d\x11\x11\x2d\x56\x48\x30\x53\x43\x8c\x95\x5e\xcf\xdd\x49\x75\x7a\xc1\x9c\x10\xb5\xac\x8e\xd9\xbe\x24\x98\x4d\x98\xc0\x65\xf1\xd4\xf6\x45\x4d\xeb\xc8\x2e\xac\xc6\x87\xc1\x6e\x89\xe6\x5d\x70\x39\xe4\x72\xbb\xfa\x97\xc4\x37\xf9\xc1\x85\x21\x7d\x80\xd5\xbc\x41\x5b\x8f\xad\xfd\xff\xf5\xec\xca\x3c\x89\xcf\x2b\xb3\x58\x9f\x50\x93\x4a\xc2\x23\xc5\x3a\xd7\x2e\x60\xed\xc6\xa8\x60\x48\x59\xf8\x60\x5d\x51\xd3\xdd\xfe\x57\x7c\xab\x3f\x19\x82\x38\x05\x8e\xc8\x2b\x33\x32\x43\x4e\xfd\xb9\xa3\x66\x27\xdc\x47\x3d\x3e\x75\x0f\xba\x3e\xf2\x6f\xbf\x39\x66\xd7\xec\x27\x00\x00\xff\xff\xd4\xa9\xc5\x93\x2f\x01\x00\x00")

func publicJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsScriptJs,
		"public/js/script.js",
	)
}

func publicJsScriptJs() (*asset, error) {
	bytes, err := publicJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/script.js", size: 303, mode: os.FileMode(420), modTime: time.Unix(1476281367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
	"public/css/styles.css": publicCssStylesCss,
	"public/js/script.js": publicJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{publicCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{publicJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
