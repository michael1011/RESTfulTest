// Code generated by go-bindata.
// sources:
// public/index.html
// public/css/styles.css
// public/js/script.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x41\x6f\xd4\x3c\x10\xbd\xef\xaf\x70\x7d\xfa\x3e\x21\xc7\x6c\x91\x38\x54\xc9\x22\x01\x95\x40\x02\x81\xda\x72\xe0\x54\x79\xed\x49\xe2\xae\x63\x07\xcf\x64\x69\xfe\x3d\x8a\x93\x6d\xbb\xab\xb4\x5d\xd1\x03\x37\xcf\x8c\xe7\xcd\xbc\x37\xce\x24\x3f\xf9\xf8\xed\xc3\xd5\xcf\xef\xe7\xac\xa6\xc6\xad\x16\x8b\xfc\x44\x08\x46\xc1\x84\x33\x86\xbd\x27\x75\xcb\x6a\x5b\xd5\xce\x56\x35\x59\x5f\x31\x21\x56\x7b\x57\xc0\x1b\x16\x3c\x03\x4f\x10\x99\x76\x56\x6f\x58\x4d\xd4\x9e\x49\x89\xa4\xf4\x26\x6c\x21\x96\x2e\xfc\xce\x74\x68\xe4\xaf\x0e\x90\x6c\xf0\x28\x97\x6f\x5f\x2f\x97\x6f\x96\xa7\x12\x6e\x41\x77\x04\xa2\xec\xbc\x1e\x42\x22\x78\x91\xb0\xc4\x06\xfa\x54\x6c\x91\xef\x1a\xab\x41\x99\xd5\x82\x31\xc6\x72\xb2\xe4\x60\x75\x71\x7e\x79\x55\x76\xee\x0a\x90\x72\x39\xba\x16\x63\xdc\x59\xbf\x61\x11\x5c\xc1\x91\x7a\x07\x58\x03\x10\x67\x75\x84\xb2\xe0\x1a\x51\x8e\xde\x4c\x23\xf2\x63\x52\x06\x46\x78\x26\x65\x19\x3c\x61\x56\x85\x50\x39\x50\xad\xc5\xc4\xca\xea\xe0\xdf\x95\xaa\xb1\xae\x2f\xbe\x2a\x82\x68\x95\x7b\xf5\x59\x07\x3f\x60\x1f\x0d\xad\x83\x81\xac\x02\x6a\x8c\xcb\x6c\x90\xcb\xec\x34\x5b\xca\x66\x82\xcb\x42\x54\xbe\x02\xb1\x76\x1d\x64\x8d\xf5\xa9\x71\x26\x77\xad\xa3\x8e\xb6\x25\x86\x51\x17\xfc\x06\xe5\x68\x66\x37\xc8\x57\xf9\x64\xac\xf6\x2e\x1a\x28\x21\x8e\xd7\x8f\x2b\x3f\x94\xdc\x87\xcb\xe5\x38\x8d\x45\xbe\x0e\xa6\x9f\xe0\x8d\xdd\x32\xed\x14\x62\xc1\x75\xf0\xa4\xac\x87\x38\x69\x90\xe2\x65\x88\xcd\xbd\x79\x98\xd2\x18\x27\x08\x6e\xa9\xb4\xe0\x0c\x1b\xac\x1b\xbc\x77\xf0\xfd\xc4\x94\x6c\x7d\xdb\xd1\x6c\xfa\xf5\x75\x8a\x71\x46\x7d\x0b\x05\x1f\xfc\x9c\x59\x53\xf0\x2e\xba\x39\x24\xa7\xd6\xe0\x1e\x41\x4a\x31\xce\xca\x10\xa7\xf4\x1f\x17\x5f\x72\x99\xbc\x07\x64\xa4\xb1\xdb\x69\x26\x73\x04\xb1\x55\x1a\xe6\xaa\xbf\x44\x84\xbf\x15\x62\x18\xdb\x63\x70\xc7\xaa\x31\x62\xbc\x0f\xa6\x9f\xd5\xe3\x31\x4d\xfe\x19\xe7\xe1\xc9\x42\xc4\x97\xd2\xbe\x83\xf9\x34\x1e\x9e\x23\xff\x84\x2b\x97\xe3\x37\xb1\x98\xd3\x25\xbd\x17\xa6\xd3\x3a\x3c\xe8\x39\x5f\x77\x44\xc1\x3f\x6c\x76\xf2\x4c\xf2\x3d\xb0\xc6\xa3\x10\x51\x59\x84\x3b\x7d\xa3\x6d\x5b\x07\x02\xca\x12\xf4\xee\x49\xa4\x8b\x9c\x05\x9f\xf6\x78\xc1\x87\xe5\xfe\xdf\xff\x33\x72\x5d\x82\x37\x07\xb4\xc6\xe4\x87\xcc\xf6\x07\xff\xdc\x87\x90\xb7\x11\x52\x17\x11\xb0\x0d\x1e\x61\xd8\x36\x6d\x84\xa7\xf7\x05\xb6\xd6\x7b\x88\x3b\x52\x3b\xd3\xa2\x50\x9a\xec\x16\x46\x62\x2e\x28\x63\x7d\x35\x20\x1e\xa8\x7f\xdf\xe3\x74\xce\xe5\xb8\xcf\x86\x05\x97\x7e\x3b\x7f\x02\x00\x00\xff\xff\xb2\xed\x50\x9b\x20\x07\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 1824, mode: os.FileMode(420), modTime: time.Unix(1476294214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x4f\xc3\x30\x0c\x85\xef\xfd\x15\xe6\xb0\x1b\x41\x45\x68\x1c\xd2\x1f\x33\xb9\x8d\x69\xad\xa5\x4e\x94\x7a\x74\x15\xe2\xbf\xa3\x26\xac\xa8\x1b\x47\xbf\xf7\xe5\x39\x7e\x2f\xa3\xf3\x46\xe9\xaa\x1f\x4c\xde\x9d\x4e\x2c\xf1\xa2\xcf\xd5\xbd\xec\xb1\x25\x7f\x2f\xc3\x57\x05\x00\x30\xb3\xd3\xc1\xc2\x6b\x5d\x1f\xe0\x89\xc7\x18\x92\xa2\x68\x53\x7d\x57\x85\x9f\x22\x8b\x50\xda\xd3\xc7\xfa\xd0\xe4\x79\xc4\xd4\xb3\x58\xa8\x01\x2f\x1a\x9a\x2a\x8b\x8e\xa7\xe8\x71\xb1\xd0\xfa\xd0\x9d\x77\xa9\xd9\xff\xe4\x89\x5b\xf6\xac\x8b\x85\x81\x9d\x23\x29\xeb\xba\x20\x8a\xfc\xb7\xac\x84\x1b\x0d\xd1\xc2\x91\xc6\x02\x4d\x11\x3b\xfa\x07\x78\x4b\x37\xa2\x23\xd1\x2d\x63\x3d\xd7\xa0\xe7\x5e\x2c\x14\x23\x43\x31\xdd\x32\xe6\x81\x95\x4c\x4e\xb5\x10\x13\x99\x39\x61\x2c\xc7\xcd\x21\xb9\x3c\x5a\x68\x13\xe1\xd9\xac\x42\x7e\xde\x06\xb7\x6c\x7f\xb8\x9a\xdf\x56\xde\x6b\x1a\x77\xd7\x66\x9f\xc5\x0c\xc4\xfd\xa0\x6b\x4b\x0f\x5d\xec\x0b\x7c\xf4\x23\x3a\xc7\xd2\x6f\x05\xfc\x04\x00\x00\xff\xff\xd9\x50\x77\xbb\xf2\x01\x00\x00")

func publicCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStylesCss,
		"public/css/styles.css",
	)
}

func publicCssStylesCss() (*asset, error) {
	bytes, err := publicCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/styles.css", size: 498, mode: os.FileMode(420), modTime: time.Unix(1476289156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xcf\x6a\xc3\x30\x0c\xc6\xef\x7d\x0a\xe1\x43\x9d\xd2\xe2\x17\x28\x61\x30\x28\xdb\xa0\xbb\x8c\x1e\x76\x75\x6b\xb5\x35\x78\x72\x6b\xcb\xc9\xc2\xe8\xbb\x0f\xe7\xdf\x0a\x63\x59\x4e\x89\xf5\xfd\x3e\x45\xfa\x7c\x4c\x74\x60\xeb\x09\x22\x92\x29\x16\xf0\x35\x03\x00\xa8\x74\x00\xe7\xb5\xb1\x74\x82\x12\x8c\x3f\xa4\x0f\x24\x56\x27\xe4\x8d\xc3\xfc\xfa\xd8\xbc\x98\x42\xf4\x12\xb1\x58\x8f\x54\xc0\x78\x99\x42\x72\xdd\x53\xc4\xcc\xb4\x50\x3e\x50\x96\x08\xc3\x0e\x3f\x19\x4a\x10\xa2\x73\xeb\xcd\x55\xe4\xc6\xa1\xaa\x6c\xb4\x7b\xeb\x2c\x37\x50\x82\x6c\xbf\x1c\xca\xde\xa3\x6b\x7c\x85\x12\x08\x6b\x78\x7f\xdd\x3e\x33\x5f\xde\xf0\x9a\x30\x72\xf1\xd3\xe8\xaa\xfc\x05\xa9\x90\x4f\x9b\x9d\x5c\x41\x6d\xc9\xf8\x5a\x39\x7f\xd0\x79\x01\xea\x1c\xf0\xb8\x14\xa1\xa3\x1e\x52\x70\xa5\x58\xfe\x39\x46\x0a\x4e\x2c\x54\xa5\x5d\xc2\x65\xeb\x9e\x1f\x31\xdf\x7b\xd3\x4c\x61\xb9\x3e\x72\x62\x7e\x46\x6d\x30\xc4\x29\xa2\x97\x0c\xd0\x0a\x38\x24\xbc\x1f\x49\x1b\xb3\xa9\x90\x78\x6b\x23\x23\x61\x28\x64\x5e\x9c\x5c\xc1\x90\xec\x18\xea\x7f\x4b\x3d\x5b\x63\x90\xe4\x7a\x14\xff\x8a\x26\xf7\x1b\x02\xcc\x47\xad\xf2\x76\xff\x37\xdd\x2d\x5a\xcf\x6e\xb3\xef\x00\x00\x00\xff\xff\xc2\x12\x1a\x1e\x59\x02\x00\x00")

func publicJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsScriptJs,
		"public/js/script.js",
	)
}

func publicJsScriptJs() (*asset, error) {
	bytes, err := publicJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/script.js", size: 601, mode: os.FileMode(420), modTime: time.Unix(1476294488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
	"public/css/styles.css": publicCssStylesCss,
	"public/js/script.js": publicJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{publicCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{publicJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
