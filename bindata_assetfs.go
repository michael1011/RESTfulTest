// Code generated by go-bindata.
// sources:
// public/index.html
// public/css/styles.css
// public/js/script.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x51\x6f\xd3\x30\x10\x7e\xef\xaf\xf0\xfc\x04\x42\x8e\xe9\x90\x78\x98\x92\x22\x01\x93\x40\x02\x81\xb6\xf1\xc0\xd3\xe4\xda\x97\xc4\xab\x63\x07\xdf\xa5\x2c\xff\x1e\xc5\x49\xd9\x5a\x65\x5b\x35\x1e\x78\x6a\xee\xce\xf7\xf9\xbe\xef\xce\xd7\xfc\xe4\xe3\xb7\x0f\x57\x3f\xbf\x9f\xb3\x9a\x1a\xb7\x5a\x2c\xf2\x13\x21\x18\x05\x13\xce\x18\xf6\x9e\xd4\x2d\xab\x6d\x55\x3b\x5b\xd5\x64\x7d\xc5\x84\x58\xed\x1d\x01\x6f\x58\xf0\x0c\x3c\x41\x64\xda\x59\xbd\x61\x35\x51\x7b\x26\x25\x92\xd2\x9b\xb0\x85\x58\xba\xf0\x3b\xd3\xa1\x91\xbf\x3a\x40\xb2\xc1\xa3\x5c\xbe\x7d\xbd\x5c\xbe\x59\x9e\x4a\xb8\x05\xdd\x11\x88\xb2\xf3\x7a\x08\x89\xe0\x45\xc2\x12\x1b\xe8\xd3\x65\x8b\x7c\x57\x58\x0d\xca\xac\x16\x8c\x31\x96\x93\x25\x07\xab\x8b\xf3\xcb\xab\xb2\x73\x57\x80\x94\xcb\xd1\xb5\x18\xe3\xce\xfa\x0d\x8b\xe0\x0a\x8e\xd4\x3b\xc0\x1a\x80\x38\xab\x23\x94\x05\xd7\x88\x72\xf4\x66\x1a\x91\x1f\x93\x32\x30\xc2\x33\x29\xcb\xe0\x09\xb3\x2a\x84\xca\x81\x6a\x2d\x26\x56\x56\x07\xff\xae\x54\x8d\x75\x7d\xf1\x55\x11\x44\xab\xdc\xab\xcf\x3a\xf8\x01\xfb\x68\x68\x1d\x0c\x64\x15\x50\x63\x5c\x66\x83\x5c\x66\xa7\xd9\x52\x36\x13\x5c\x16\xa2\xf2\x15\x88\xb5\xeb\x20\x6b\xac\x4f\x85\x33\xb9\x2b\x1d\x75\xb4\x2d\x31\x8c\xba\xe0\x37\x28\x47\x33\xbb\x41\xbe\xca\x27\x63\xb5\x77\xd0\x40\x09\x71\x3c\x7e\xdc\xf5\xc3\x95\xfb\x70\xb9\x1c\xbb\xb1\xc8\xd7\xc1\xf4\x13\xbc\xb1\x5b\xa6\x9d\x42\x2c\xb8\x0e\x9e\x94\xf5\x10\x27\x0d\x52\xbc\x0c\xb1\xb9\x33\x0f\x53\x1a\xe3\x04\xc1\x2d\x95\x16\x9c\x61\x83\x75\x83\x77\x0e\xbe\x9f\x98\x92\xad\x6f\x3b\x9a\x4d\xbf\xbe\x4e\x31\xce\xa8\x6f\xa1\xe0\x83\x9f\x33\x6b\x0a\xde\x45\x37\x87\xe4\xd4\x1a\xdc\x03\x48\x29\xc6\x59\x19\xe2\x94\xfe\xe3\xe2\x4b\x2e\x93\xf7\x80\x8c\x34\x76\x3b\xf5\x64\x8e\x20\xb6\x4a\xc3\xdc\xed\xff\x22\xc2\x73\x85\x18\xda\xf6\x10\xdc\xb1\x6a\x8c\x18\xef\x83\xe9\x67\xf5\x78\x48\x93\xff\xc6\x79\x18\xd9\xbd\x89\x7c\x16\xeb\x1d\xca\xa7\xf4\xfb\x14\xf3\x47\x5c\xb9\x1c\x1f\xc4\x62\x4e\x94\x34\x2c\x4c\xa7\x5d\x78\x50\x71\xbe\xee\x88\x82\xbf\x5f\xea\xe4\x99\xb4\xbb\x67\x8d\x9f\x42\x44\x65\x11\xfe\x8a\x1b\x6d\xdb\x3a\x10\x50\x96\xa0\x77\xf3\x90\x0e\x72\x16\x7c\x5a\xe2\x05\x1f\x36\xfb\x8b\x97\x33\x62\x5d\x82\x37\x07\xb4\xc6\xe4\xfb\xcc\xf6\xbb\xfe\xd4\x2b\xc8\xdb\x08\xa9\x8a\x08\xd8\x06\x8f\x30\xac\x9a\x36\xc2\xe3\xcb\x02\x5b\xeb\x3d\xc4\x1d\xa9\x9d\x69\x51\x28\x4d\x76\x0b\x23\x31\x17\x94\xb1\xbe\x1a\x10\x0f\xd4\xbf\xab\x71\xfa\xce\xe5\xb8\xcc\x86\xed\x96\xfe\x73\xfe\x04\x00\x00\xff\xff\x1b\xe2\x8a\x3c\x1d\x07\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 1821, mode: os.FileMode(420), modTime: time.Unix(1476291481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x4f\xc3\x30\x0c\x85\xef\xfd\x15\xe6\xb0\x1b\x41\x45\x68\x1c\xd2\x1f\x33\xb9\x8d\x69\xad\xa5\x4e\x94\x7a\x74\x15\xe2\xbf\xa3\x26\xac\xa8\x1b\x47\xbf\xf7\xe5\x39\x7e\x2f\xa3\xf3\x46\xe9\xaa\x1f\x4c\xde\x9d\x4e\x2c\xf1\xa2\xcf\xd5\xbd\xec\xb1\x25\x7f\x2f\xc3\x57\x05\x00\x30\xb3\xd3\xc1\xc2\x6b\x5d\x1f\xe0\x89\xc7\x18\x92\xa2\x68\x53\x7d\x57\x85\x9f\x22\x8b\x50\xda\xd3\xc7\xfa\xd0\xe4\x79\xc4\xd4\xb3\x58\xa8\x01\x2f\x1a\x9a\x2a\x8b\x8e\xa7\xe8\x71\xb1\xd0\xfa\xd0\x9d\x77\xa9\xd9\xff\xe4\x89\x5b\xf6\xac\x8b\x85\x81\x9d\x23\x29\xeb\xba\x20\x8a\xfc\xb7\xac\x84\x1b\x0d\xd1\xc2\x91\xc6\x02\x4d\x11\x3b\xfa\x07\x78\x4b\x37\xa2\x23\xd1\x2d\x63\x3d\xd7\xa0\xe7\x5e\x2c\x14\x23\x43\x31\xdd\x32\xe6\x81\x95\x4c\x4e\xb5\x10\x13\x99\x39\x61\x2c\xc7\xcd\x21\xb9\x3c\x5a\x68\x13\xe1\xd9\xac\x42\x7e\xde\x06\xb7\x6c\x7f\xb8\x9a\xdf\x56\xde\x6b\x1a\x77\xd7\x66\x9f\xc5\x0c\xc4\xfd\xa0\x6b\x4b\x0f\x5d\xec\x0b\x7c\xf4\x23\x3a\xc7\xd2\x6f\x05\xfc\x04\x00\x00\xff\xff\xd9\x50\x77\xbb\xf2\x01\x00\x00")

func publicCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStylesCss,
		"public/css/styles.css",
	)
}

func publicCssStylesCss() (*asset, error) {
	bytes, err := publicCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/styles.css", size: 498, mode: os.FileMode(420), modTime: time.Unix(1476289156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\xcd\x4a\xc4\x30\x10\xbe\xef\x53\x0c\xb9\xa4\xcb\x96\xbc\x40\x29\x82\x50\x54\x58\x2f\xb2\x07\xaf\xb5\x99\xdd\x0d\xc4\x49\x9b\x4c\x5a\x8b\xec\xbb\x4b\xda\x6e\x5d\x10\xf5\x96\x4c\xbe\x9f\x7c\xdf\x1c\x23\x35\x6c\x1c\x41\x40\xd2\xd9\x16\x3e\x37\x00\x00\x7d\xed\xc1\xba\x5a\x1b\x3a\x41\x09\xda\x35\xf1\x1d\x89\xd5\x09\xb9\xb2\x98\x8e\xf7\xe3\x93\xce\xc4\x02\x11\xdb\x62\x65\x79\x0c\xed\x5f\x94\xf4\xee\x28\x60\xe2\x4c\xa4\x34\x50\x86\x08\xfd\x01\x3f\x18\x4a\x10\x62\x56\x5b\xc4\x55\xe0\xd1\xa2\xea\x4d\x30\x6f\xc6\x1a\x1e\xa1\x04\x39\xdd\x2c\xca\x45\x63\x36\xee\xa0\x04\xc2\x01\x5e\x9f\xf7\x8f\xcc\xed\x0b\x76\x11\x03\x67\xdf\x46\x9d\x72\x2d\x52\x26\x1f\xaa\x83\xcc\x61\x30\xa4\xdd\xa0\xac\x6b\xea\x54\x80\x3a\x7b\x3c\xee\x84\x9f\x59\x77\xd1\xdb\x52\xec\x7e\x8d\x11\xbd\x15\x5b\xd5\xd7\x36\x62\x0e\xec\x23\xde\xba\xd4\x5a\x57\x3d\x12\xef\x4d\x60\x24\xf4\x99\x4c\x59\x64\x0e\xd7\xb2\xd7\x9e\xff\xcb\x79\x36\x5a\x23\xc9\x62\x05\xff\x68\x2b\xf9\x5d\x3b\x4d\xa3\x09\x79\xb9\xfd\xcd\xbc\xd8\x62\x73\xd9\x7c\x05\x00\x00\xff\xff\x0e\x2b\xff\x33\xec\x01\x00\x00")

func publicJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsScriptJs,
		"public/js/script.js",
	)
}

func publicJsScriptJs() (*asset, error) {
	bytes, err := publicJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/script.js", size: 492, mode: os.FileMode(420), modTime: time.Unix(1476290264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
	"public/css/styles.css": publicCssStylesCss,
	"public/js/script.js": publicJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{publicCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{publicJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
