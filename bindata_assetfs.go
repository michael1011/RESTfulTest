// Code generated by go-bindata.
// sources:
// public/build.txt
// public/index.html
// public/css/styles.css
// public/js/script.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicBuildTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x49\x2d\xe3\x02\x04\x00\x00\xff\xff\xed\x81\xac\x42\x04\x00\x00\x00")

func publicBuildTxtBytes() ([]byte, error) {
	return bindataRead(
		_publicBuildTxt,
		"public/build.txt",
	)
}

func publicBuildTxt() (*asset, error) {
	bytes, err := publicBuildTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/build.txt", size: 4, mode: os.FileMode(420), modTime: time.Unix(1476358434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x51\x6f\xd3\x30\x10\x7e\xef\xaf\xf0\xfc\x04\x42\x89\xe9\x90\x78\x98\x92\x22\x01\x93\x40\x1a\x02\x6d\xe3\x81\xa7\xc9\xb5\x2f\x89\x57\xc7\x0e\xbe\x4b\x59\xfe\x3d\xb2\x93\x6e\x6d\xd5\x6d\x15\x7b\xa0\x0f\x95\xef\xce\xf7\xf9\xbe\xcf\xe7\x4b\x71\xf2\xf9\xfb\xa7\xeb\x5f\x3f\xce\x59\x43\xad\x5d\xcc\x66\xc5\x49\x96\x31\xf2\xda\x9f\x31\x1c\x1c\xc9\x3b\xd6\x98\xba\xb1\xa6\x6e\xc8\xb8\x9a\x65\xd9\x62\x67\x0b\x38\xcd\xbc\x63\xe0\x08\x02\x53\xd6\xa8\x15\x6b\x88\xba\x33\x21\x90\xa4\x5a\xf9\x35\x84\xca\xfa\x3f\xb9\xf2\xad\xf8\xdd\x03\x92\xf1\x0e\xc5\xfc\xfd\xdb\xf9\xfc\xdd\xfc\x54\xc0\x1d\xa8\x9e\x20\xab\x7a\xa7\x62\x28\xf3\x2e\x4b\x58\xd9\x0a\x86\x74\xd8\xac\xd8\x14\xd6\x80\xd4\x8b\x19\x63\x8c\x15\x64\xc8\xc2\xe2\xf2\xfc\xea\xba\xea\xed\x35\x20\x15\x62\x74\xcd\xc6\xb8\x35\x6e\xc5\x02\xd8\x92\x23\x0d\x16\xb0\x01\x20\xce\x9a\x00\x55\xc9\x15\xa2\x18\xbd\xb9\x42\xe4\xc7\xa4\x44\x46\x78\x26\x44\xe5\x1d\x61\x5e\x7b\x5f\x5b\x90\x9d\xc1\xc4\xca\x28\xef\x3e\x54\xb2\x35\x76\x28\xbf\x49\x82\x60\xa4\x7d\xf3\x55\x79\x17\xb1\x8f\x86\x56\x5e\x43\x5e\x03\xb5\xda\xe6\xc6\x8b\x79\x7e\x9a\xcf\x45\x3b\xc1\xe5\x3e\x48\x57\x43\xb6\xb4\x3d\xe4\xad\x71\xa9\x70\x26\x36\xa5\xa3\x0a\xa6\x23\x86\x41\x95\xfc\x16\xc5\x68\xe6\xb7\xc8\x17\xc5\x64\x2c\x76\x36\x6a\xa8\x20\x8c\xdb\x8f\x3b\x3e\x1e\xb9\x0b\x57\x88\xf1\x36\x66\xc5\xd2\xeb\x81\x79\x67\xbd\xd4\x25\x0f\x50\x1b\x24\x08\x17\xf1\xdf\x41\xc0\x57\xaf\x37\x22\x68\xb3\x66\xca\x4a\xc4\x92\x2b\xef\x48\x1a\x07\x61\x8a\xa5\x78\xe5\x43\xfb\x60\xee\xa7\xb4\xda\x66\x04\x77\x54\x19\xb0\x9a\x45\xeb\x16\x1f\x1c\x7c\x37\x31\x25\x1b\xd7\xf5\x74\x30\xfd\xe6\x26\xc5\x38\xa3\xa1\x83\x92\x47\x3f\x67\x46\x97\xbc\x0f\xf6\x10\x92\x95\x4b\xb0\x8f\x20\xa5\x18\x67\x95\x0f\x53\xfa\xcf\xcb\x8b\x42\x24\xef\x1e\x19\xa1\xcd\x7a\xba\xb0\x43\x04\xb1\x93\x0a\x0e\x9d\xfe\x12\x11\xfe\x55\x88\x78\xa7\x8f\xc1\x1d\xab\xc6\x88\xf1\xd1\xeb\xe1\xa0\x1e\x8f\x69\xf2\xdf\x38\xc7\x7e\x86\x80\x2f\xa5\x7d\x0f\xf3\x65\x5c\x3c\x47\xfe\x09\x57\x21\xc6\x37\x31\x3b\xa4\x4b\xea\x17\xa6\xd2\xac\xdc\xab\xb9\x58\xf6\x44\xde\x6d\x17\x3b\x79\x26\xf9\xb6\xac\x71\x99\x65\x41\x1a\x84\x7b\x7d\x83\xe9\x3a\x0b\x19\x54\x15\xa8\x4d\x4b\xa4\x8d\x9c\x79\x97\x86\x7c\xc9\xe3\xe4\xbf\x7f\xdd\xdb\xbf\x2b\x70\x7a\x8f\xd6\x98\xbc\xcd\x6c\xf7\xe2\x9f\x7b\x08\x45\x17\x20\x55\x11\x00\x3b\xef\x10\xe2\x28\xea\x02\x3c\x3d\x2f\xb0\x33\xce\x41\xd8\x90\xda\x98\x06\x33\xa9\xc8\xac\x61\x24\x16\x07\x97\x71\x75\x44\xdc\x53\xff\xa1\xc6\x69\x5d\x88\xd8\xd4\x71\xe8\x89\xf1\x9b\xf4\x37\x00\x00\xff\xff\x08\x3d\xb9\x84\x3d\x07\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 1853, mode: os.FileMode(420), modTime: time.Unix(1476374693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x4f\xc3\x30\x0c\x85\xef\xfd\x15\xe6\xb0\x1b\x41\x45\x68\x1c\xd2\x1f\x33\xb9\x8d\x69\xad\xa5\x4e\x94\x7a\x74\x15\xe2\xbf\xa3\x26\xac\xa8\x1b\x47\xbf\xf7\xe5\x39\x7e\x2f\xa3\xf3\x46\xe9\xaa\x1f\x4c\xde\x9d\x4e\x2c\xf1\xa2\xcf\xd5\xbd\xec\xb1\x25\x7f\x2f\xc3\x57\x05\x00\x30\xb3\xd3\xc1\xc2\x6b\x5d\x1f\xe0\x89\xc7\x18\x92\xa2\x68\x53\x7d\x57\x85\x9f\x22\x8b\x50\xda\xd3\xc7\xfa\xd0\xe4\x79\xc4\xd4\xb3\x58\xa8\x01\x2f\x1a\x9a\x2a\x8b\x8e\xa7\xe8\x71\xb1\xd0\xfa\xd0\x9d\x77\xa9\xd9\xff\xe4\x89\x5b\xf6\xac\x8b\x85\x81\x9d\x23\x29\xeb\xba\x20\x8a\xfc\xb7\xac\x84\x1b\x0d\xd1\xc2\x91\xc6\x02\x4d\x11\x3b\xfa\x07\x78\x4b\x37\xa2\x23\xd1\x2d\x63\x3d\xd7\xa0\xe7\x5e\x2c\x14\x23\x43\x31\xdd\x32\xe6\x81\x95\x4c\x4e\xb5\x10\x13\x99\x39\x61\x2c\xc7\xcd\x21\xb9\x3c\x5a\x68\x13\xe1\xd9\xac\x42\x7e\xde\x06\xb7\x6c\x7f\xb8\x9a\xdf\x56\xde\x6b\x1a\x77\xd7\x66\x9f\xc5\x0c\xc4\xfd\xa0\x6b\x4b\x0f\x5d\xec\x0b\x7c\xf4\x23\x3a\xc7\xd2\x6f\x05\xfc\x04\x00\x00\xff\xff\xd9\x50\x77\xbb\xf2\x01\x00\x00")

func publicCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStylesCss,
		"public/css/styles.css",
	)
}

func publicCssStylesCss() (*asset, error) {
	bytes, err := publicCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/styles.css", size: 498, mode: os.FileMode(420), modTime: time.Unix(1476289156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\xa9\x0e\x6b\x85\x04\x41\xe9\xd1\x88\x42\x4b\x68\x0b\xdb\x4b\xd9\x43\xaf\xde\x68\x9c\x88\x55\xa5\x44\x92\xed\x9a\xe2\x77\x2f\xb2\x64\xaf\xed\xb0\x86\xd6\x07\x23\x69\xe6\xd3\xfc\x9a\xf9\xab\x5a\x9f\xbc\x34\x1a\x2c\x9e\xa5\xf3\x68\x1f\xc3\x5f\xa3\x75\x74\x07\x7f\x32\x00\xb8\x8b\x50\x61\x4e\xf5\x2f\xd4\x9e\x9d\xd1\x1f\x15\x86\xe5\xa7\xee\x9b\xa0\xa4\xb6\x8a\xec\x76\xc5\x3f\x52\xcf\x46\x74\xff\x81\x5d\xb0\x14\x68\xdd\x40\xf6\x59\xf6\xe6\x43\x28\x46\x6a\x7c\x4e\xda\xb2\x52\x88\x63\x83\xda\x4f\x79\xe4\x05\x3b\x61\x5a\x4d\x0e\x30\x5d\x46\x71\xc4\xc2\x27\x2b\xa0\xc8\x5e\xb0\xfb\x6c\x04\x02\xe7\x1c\xde\x7f\x98\xc7\xc3\xe7\x50\x0b\xba\x9b\x8e\xfa\x61\xd5\x47\x8d\x4d\x69\x41\x99\x52\x48\x7d\x06\x0e\x55\xa9\x1c\x16\x33\xe5\x11\x4d\xf7\x85\x5a\xef\x52\xf2\xbc\xc6\x2b\xef\x6d\x1d\xf0\x31\xb0\xbc\xfc\xcd\xb6\xa5\x14\x92\xfa\x3d\x92\x16\xdd\x75\x0b\x0b\x71\xa3\x1d\x06\x6e\x02\xc3\x21\x93\x5a\xa3\x7d\xc2\xdf\x1e\x38\x10\x52\xac\x85\x32\xe7\x3b\x85\xac\x91\x4e\x3e\x4b\x25\x7d\x07\x1c\xf2\x61\xa7\x30\x5f\xc9\xb7\x78\x03\x0e\x1a\x5b\xf8\xf9\xfd\xf1\xab\xf7\xd7\x1f\x78\xab\xd1\x79\xba\x2c\x7a\x63\xe6\x8a\x9a\xe6\x5f\x8e\x4f\xf9\x01\x5a\xa9\x85\x69\x99\x32\xa7\x32\x74\x91\x5d\x2c\x56\x7b\x62\x23\xf9\xb1\xb6\x8a\x93\xfd\xb6\x63\x59\x53\xaa\x1a\xf7\x8b\x31\x92\x87\x60\xcb\x2d\x34\xda\x36\xb1\xe4\x21\xd9\x71\x8b\x98\x1c\x1b\xa1\xc3\x30\xc1\xf5\xd3\xee\x6c\x99\x87\x46\xe6\xaf\x9e\xa4\x6b\xc7\x6d\x35\xfa\x22\x85\x40\x9d\x17\x0b\xe0\x6e\x6c\xa1\xee\x38\xe0\x70\x34\x93\xb4\xb4\x5c\xb2\xec\x64\xee\xb5\xf8\xe8\xe0\x98\xd0\x67\x59\x9f\xfd\x0d\x00\x00\xff\xff\x64\x0f\xad\x77\x5f\x04\x00\x00")

func publicJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsScriptJs,
		"public/js/script.js",
	)
}

func publicJsScriptJs() (*asset, error) {
	bytes, err := publicJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/script.js", size: 1119, mode: os.FileMode(420), modTime: time.Unix(1476374942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/build.txt": publicBuildTxt,
	"public/index.html": publicIndexHtml,
	"public/css/styles.css": publicCssStylesCss,
	"public/js/script.js": publicJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"build.txt": &bintree{publicBuildTxt, map[string]*bintree{}},
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{publicCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{publicJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
