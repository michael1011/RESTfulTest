// Code generated by go-bindata.
// sources:
// public/index.html
// public/css/styles.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x94\xc1\x6e\xd4\x30\x10\x86\xef\x79\x0a\x63\x8e\x28\xb1\xca\x11\x39\x41\x02\x2a\x81\x04\x02\xb5\xcb\x81\x53\xe5\xb5\xc7\xbb\x2e\x8e\x1d\x79\x26\x15\x79\x7b\x94\x38\x6d\x97\x55\xa2\x6e\x97\x43\x73\xb1\x3d\xa3\xf9\x3c\xff\x1f\x6b\xe4\xab\x4f\xdf\x3f\x6e\x7e\xfd\xb8\x64\x7b\x6a\x7d\x53\x14\xf2\x61\x05\x65\x9a\x82\x31\xc6\x24\x39\xf2\xd0\x5c\x5d\x5e\x6f\x6c\xef\x37\x80\x24\x45\x0e\x15\x39\xef\x5d\xf8\xcd\x12\xf8\x9a\x23\x0d\x1e\x70\x0f\x40\x9c\xed\x13\xd8\x9a\x6b\x44\x91\xa3\x95\x46\xe4\xa7\x94\xec\x89\x3a\x7c\x27\x84\x8d\x81\xb0\xda\xc5\xb8\xf3\xa0\x3a\x87\x95\x8e\xad\x70\x3a\x86\xf7\x56\xb5\xce\x0f\xf5\x37\x45\x90\x9c\xf2\x6f\xbe\xe8\x18\x46\xf6\xc9\x68\x1d\x0d\x54\x3b\xa0\xd6\xf8\xca\x45\x71\x51\xbd\xad\x2e\x44\x3b\xe3\xaa\x98\x54\xd8\x41\xb9\xf5\x3d\x54\xad\x0b\x53\xe3\x4c\xdc\xb7\x8e\x3a\xb9\x8e\x98\x01\x0b\x89\x61\xd2\xa7\x52\x47\xd2\x2d\xf2\x46\x8a\x4c\x68\x0a\x29\xb2\xc9\x85\xdc\x46\x33\xcc\xed\x1b\x77\xc7\xb4\x57\x88\x35\xd7\x31\x90\x72\x01\xd2\x2c\x6d\xca\xdb\x98\x5a\xa6\x34\xb9\x18\x6a\xfe\xfa\x20\x73\x5c\xdd\x1a\x5f\x12\xfc\x21\xeb\xc0\x1b\x36\x9e\x6e\xf1\x31\x70\x54\x38\x15\xbb\xd0\xf5\xb4\x58\x7e\x73\x33\xe5\x38\xa3\xa1\x83\x9a\xf7\xc9\x73\xe6\x4c\xde\x2c\x80\xbc\xda\x82\x5f\x01\x4d\x39\xce\x6c\x4c\x73\xf9\xcf\xab\xaf\x52\x4c\xd1\x23\x2d\xc2\xb8\xbb\xd9\xf4\x25\x7d\xd8\x29\x0d\x4b\xb7\xff\x8f\x07\x67\xfa\x30\xfe\xbf\x35\xda\xa9\x66\x64\xc6\x87\x68\x86\x45\x3b\xd6\x2c\x79\x29\xc9\xe3\xd3\xfd\xe7\x65\x9e\x25\xfa\x9e\xf2\x79\x5a\x9f\x12\xfe\x94\x17\xcf\x7d\x1e\x1a\x02\xad\x6b\xd8\xf6\x44\x31\x1c\x8a\x98\x23\xb3\xa9\x07\xa7\xbc\x2d\xcb\xa4\x1c\xc2\x83\xeb\xc9\x75\x9d\x87\x12\xac\x05\x4d\x2b\xb7\x8c\xdf\x35\x04\xb3\xdc\x82\xc8\xe0\xe7\x18\xf2\x78\x1c\x27\xc5\x3c\x54\x72\x4a\x8a\x3c\x67\xc6\xc1\x33\x4d\xf9\xbf\x01\x00\x00\xff\xff\x32\xbb\xbe\x2c\xfe\x05\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 1534, mode: os.FileMode(420), modTime: time.Unix(1476213120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x41\x0e\x82\x30\x10\x45\xf7\x3d\xc5\xb8\x70\x67\x49\x35\x71\x83\x87\x21\x85\x8e\x30\x49\x3b\x6d\xea\x10\x31\xc6\xbb\x1b\x04\x89\x10\xb7\xf3\x5e\x7f\xff\x2f\x82\xf3\x5a\x70\x90\x2b\xa1\x77\x55\x45\x9c\x7a\x39\xa8\xed\xd9\xdb\x1a\xfd\xf6\x0c\x4f\x05\x00\x70\x27\x27\x5d\x09\x47\x63\xf6\xb0\xa3\x90\x62\x16\xcb\x72\x51\x2f\xa5\x8a\x26\xb2\x58\x62\xcc\xb3\x1b\x6c\x6e\x89\xb5\xc4\x34\x3e\xc8\x18\x26\xed\x96\x6c\x83\x7f\x94\xd3\x62\x34\xc8\xb2\xa4\x8c\x0d\xb4\xf5\xd4\x72\x09\x13\xf8\x48\x75\x74\x8f\x6f\x08\xb1\xee\x90\xda\x4e\x4a\x30\xab\x56\x3f\x7f\x8c\xc8\xf6\x12\x57\x7c\xc2\x83\x9e\x57\x9d\x0d\x86\xed\xaa\x77\x00\x00\x00\xff\xff\x05\x72\xfa\xb9\x34\x01\x00\x00")

func publicCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStylesCss,
		"public/css/styles.css",
	)
}

func publicCssStylesCss() (*asset, error) {
	bytes, err := publicCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/styles.css", size: 308, mode: os.FileMode(420), modTime: time.Unix(1476213087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
	"public/css/styles.css": publicCssStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{publicCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
