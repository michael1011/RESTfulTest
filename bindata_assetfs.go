// Code generated by go-bindata.
// sources:
// public/build.txt
// public/index.html
// public/css/styles.css
// public/js/script.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicBuildTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x49\x2d\xe3\x02\x04\x00\x00\xff\xff\xed\x81\xac\x42\x04\x00\x00\x00")

func publicBuildTxtBytes() ([]byte, error) {
	return bindataRead(
		_publicBuildTxt,
		"public/build.txt",
	)
}

func publicBuildTxt() (*asset, error) {
	bytes, err := publicBuildTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/build.txt", size: 4, mode: os.FileMode(420), modTime: time.Unix(1476358434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x70\x79\xda\xc5\x42\xe4\x7a\x7b\x28\x5a\x50\x2e\xd0\x36\x40\x0b\xa4\x68\x91\xa4\x87\x9e\x02\x9a\x1c\x49\x54\x28\x52\xe5\x50\x41\xfc\xef\x0b\x8a\xf2\x67\x9c\xc4\x69\x0e\xf5\xc1\xe6\x0c\x39\x6f\xe6\x3d\x0e\xc7\xe2\xaf\x8f\x5f\x3f\x5c\xfd\xf8\x76\x46\x9a\xd8\xd9\xc5\x6c\x26\x36\xbf\x20\xf5\x62\x46\x08\x21\x22\x9a\x68\x61\x71\x71\x76\x79\x55\x0d\xf6\x0a\x30\x0a\x9e\x5d\xb3\xbc\x6f\x8d\xbb\x21\x01\x6c\x49\x31\xae\x2c\x60\x03\x10\x29\x69\x02\x54\x25\x55\x88\x3c\x7b\x99\x42\xa4\xa7\x84\x34\x31\xf6\xf8\x96\xf3\xca\xbb\x88\xac\xf6\xbe\xb6\x20\x7b\x83\x4c\xf9\x8e\x1b\xe5\xdd\xbb\x4a\x76\xc6\xae\xca\x2f\x32\x42\x30\xd2\xfe\xfb\x59\x79\x97\xb0\x4f\x86\x56\x5e\x03\xab\x21\x76\xda\x32\xe3\xf9\x9c\xfd\xcf\xe6\xbc\x9b\xe0\x98\x0f\xd2\xd5\x50\x2c\xed\x00\xac\x33\x6e\x2c\x9c\xf0\xe7\xc0\x6b\xd7\x22\x53\xd6\x0f\xba\xb2\x32\xc0\x58\xb9\x6c\xe5\x1d\xb7\x66\x89\xbc\x31\x75\x63\x4d\xdd\x44\xd6\x22\x7f\xc3\x5e\xb3\xff\x26\x89\xb8\x86\x4a\x0e\x36\x6e\xb2\xae\xe5\x42\x15\x4c\x1f\x09\x06\x55\xd2\x16\x79\x36\x59\x8b\x74\x21\x26\xe3\xe0\xa4\x86\x0a\x42\x3e\x7f\x1a\xe7\x94\x71\x1f\xef\x5e\xe2\x3d\xa0\xf6\xe7\x00\x61\x35\x12\xcb\xcb\xe2\x15\x9b\xb3\xf9\xb3\x70\x9e\xad\xd2\xd6\x75\x3f\x8d\xe0\xb9\x63\x67\x62\xe9\xf5\x8a\x78\x67\xbd\xd4\x25\x0d\x50\x1b\x8c\x10\xce\xd3\xb7\x83\x80\x7f\xff\xb3\x6e\x14\x6d\x6e\x89\xb2\x12\xb1\xa4\xca\xbb\x28\x8d\x83\x30\xed\x8d\xfb\x95\x0f\xdd\xd6\x3c\x0c\xe9\xb4\x2d\x22\xdc\xc5\xca\x80\xd5\x24\x59\x2d\x6e\x1d\x74\x3f\x70\x0c\x36\xae\x1f\xe2\xd1\xf0\xeb\xeb\x71\x8f\x92\xb8\xea\xa1\xa4\xc9\x4f\x89\xd1\x25\x1d\x82\x3d\x86\x64\xe5\x12\xec\x03\x48\xe3\x1e\x25\x95\x0f\x53\xf8\xf7\x8b\x73\xc1\x47\xef\x01\x19\xae\xcd\xed\xd4\x36\xc7\x08\x62\x2f\x15\x1c\xcb\xfe\x12\x11\x7e\x57\x88\x74\xa7\x0f\xc1\x9d\xaa\x46\xc6\x78\xef\xf5\xea\xa8\x1e\x0f\x69\xf2\xc7\x38\xa7\x7e\x86\x80\x2f\xa5\xbd\x81\xf9\x94\x17\x4f\x91\x7f\xc4\x25\x78\x7e\x13\xb3\x63\xba\x8c\xfd\x42\x14\xb8\xb8\xf7\x8c\xc6\x63\xcb\x21\x46\xef\x76\x8b\x9d\x3c\x93\x7c\x3b\x56\x5e\x16\x45\x90\x06\x61\xa3\x6f\x30\x7d\x6f\xa1\x80\xaa\x02\xb5\x6e\x89\xf1\x20\x25\xde\x29\x6b\xd4\x4d\x49\x11\x9c\xde\xbc\xee\xdd\xcf\x25\x38\x7d\x40\x2b\x07\xef\x32\xdb\xbf\xf8\xa7\x1e\x82\xe8\x03\x2c\x44\x9a\x84\x63\x2d\x01\xb0\xf7\x0e\x21\x0d\xa4\xe4\x5c\x08\x9e\x0e\x3c\x3a\x3c\xb0\x37\xce\x41\x58\x33\x5c\x9b\x06\x0b\xa9\xa2\xb9\x85\xcc\x32\x4d\x31\xe3\xea\x04\x7c\x70\x15\xdb\x82\xa7\xb5\xe0\xa9\xc3\xd3\x04\xe4\xf9\x4f\xfc\x57\x00\x00\x00\xff\xff\xe3\x05\x25\x10\xdd\x07\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 2013, mode: os.FileMode(420), modTime: time.Unix(1476376758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x6e\xf2\x30\x10\x84\xef\x79\x8a\xfd\x0f\xdc\x7e\xa3\x54\x15\x3d\x98\x87\x41\x9b\x78\x1b\x6f\x71\xd6\x96\xb3\x34\xa0\xaa\xef\x5e\x61\x03\x55\x42\x8f\x9e\x99\xcc\x4e\xbe\xed\xe8\x82\x51\x3a\xeb\x3b\x53\x70\x87\x03\x4b\x3a\xe9\xff\x66\x2d\x07\xec\x28\xac\x65\xf8\x6a\x00\x00\x66\x76\xea\x2d\xbc\xb4\xed\x06\xfe\xf1\x98\x62\x56\x14\xdd\x37\xdf\x4d\xcd\x4f\x89\x45\x28\x2f\xd3\xbb\x76\xb3\x2f\xef\x11\xf3\xc0\x62\xa1\x05\x3c\x69\xdc\x37\x45\x74\x3c\xa5\x80\x17\x0b\x5d\x88\xfd\x71\xd1\x5a\xfc\x4f\x9e\xb8\xe3\xc0\x7a\xb1\xe0\xd9\x39\x92\x7a\xce\x87\x8f\xe9\x76\xa7\xc3\xfe\x38\xe4\x78\x12\x67\x41\xa2\xd0\x7a\x5a\xb3\xed\xa3\x28\xf2\xef\xb2\xba\xc4\x68\x4c\x16\x76\x34\xd6\xc6\x29\x61\x4f\x7f\x04\x5e\xf3\x3d\xd1\x93\xe8\xa3\xe3\xca\xc6\x60\xe0\x41\x2c\x54\xa3\x84\x52\xbe\x77\xcc\x9e\x95\x4c\x69\xb5\x90\x32\x99\x39\x63\xaa\x24\xe6\x98\x5d\x79\x5a\xe8\x32\xe1\xd1\x5c\x85\xf2\x79\x17\xdd\xe5\xb1\xe1\x6c\x6e\x08\xdf\x5a\x1a\x17\x7f\x55\x7c\x16\xe3\x89\x07\xaf\x57\xa4\x4f\xe0\x96\xb4\x9f\xfd\x84\xce\xb1\x0c\x0f\x00\x3f\x01\x00\x00\xff\xff\x39\x84\x91\x0f\x1f\x02\x00\x00")

func publicCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStylesCss,
		"public/css/styles.css",
	)
}

func publicCssStylesCss() (*asset, error) {
	bytes, err := publicCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/styles.css", size: 543, mode: os.FileMode(420), modTime: time.Unix(1476376722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\xa9\x28\x6b\x99\x04\x41\xe9\x31\x98\xc2\x96\xd0\x16\xb6\x97\xb2\x87\x5e\x1d\x6b\x62\xab\x51\xa5\x44\x92\x93\x9a\xe2\x77\x2f\x13\xd9\x5e\xc7\xe9\x1a\x5a\x1d\x8c\x2d\xcd\x37\xf3\x6b\xe6\xf7\xbe\x31\x65\x50\xd6\x80\xc3\x4a\xf9\x80\xee\x89\x9e\x06\x9d\xe7\x19\xfc\x4e\x00\xe0\xee\x84\x4b\x5b\x36\x3f\xd1\x04\x51\x61\xd8\x6a\xa4\xd7\xc7\xf6\x8b\xe4\xac\x71\x9a\x65\xd9\xe6\x1f\xa9\x9d\x95\xed\x7f\x60\x35\x16\x12\x9d\xbf\x92\x5d\x92\xbc\x7a\x11\x8e\x91\x1a\xae\xd3\x7f\x8a\x42\xca\xed\x19\x4d\x18\xe3\xd8\x01\x5b\x69\x2f\x86\xad\x61\x4c\xc6\x71\xc0\x68\xa9\x3d\x70\x14\x07\x6c\x3f\x5a\x89\x90\xe7\x39\xbc\x7b\x3f\x3d\xa7\xe5\xd1\x48\x9e\x8d\x5b\xdd\xf5\xad\x8b\x1a\xcf\x85\x83\xbd\x32\xca\xd7\x28\x21\x87\x7d\xa1\x3d\x6e\x26\xd2\x23\xdb\x27\xa4\x62\x6f\x86\xe8\x69\x95\x49\x86\xe0\x1a\x4a\x30\x9c\x50\x7e\x6d\x0b\xa9\x4c\x05\x39\xbc\xda\xb9\x3e\x84\xf5\x2d\x1f\x48\x87\xfe\xb8\x84\xd1\xb9\x35\x1e\x89\x1b\x41\xda\x14\xca\x18\x74\xcf\xf8\x2b\x40\x0e\x8c\xbd\x64\xed\x0b\x09\x1f\x5a\x8d\xe2\xac\xbc\xda\x29\xad\x42\x0b\x39\xa4\xd7\x2f\x8d\xe9\x4c\xbe\xc3\x13\xe4\x60\xf0\x02\xdf\xbf\x3e\x7d\x0e\xe1\xf8\x0d\x4f\x0d\xfa\xc0\x6f\x8b\x9e\x84\x3d\xa2\xe1\xe9\xa7\xed\x73\xba\x86\x8b\x32\xd2\x5e\x84\xb6\x65\x41\x7d\x14\xb5\xc3\xfd\x8a\xb9\x48\x7e\x68\x9c\xce\xd9\x6a\xd9\xb4\xe2\x5c\xe8\x06\x57\x37\x93\x64\x0f\xe4\xcc\x25\x34\x3a\xb7\x67\xd9\x43\xef\xc8\x25\x62\x34\x6d\x84\xd6\xd7\x09\xce\xaf\x76\xe7\xcc\x94\x1a\x99\xbe\xd8\x92\xcf\x4d\xb7\xd4\xe8\x5a\x49\x89\x26\xdd\xdc\x00\x77\x63\xa3\xba\xc3\x80\x69\x6b\x22\x89\xd6\x5b\x9e\x1e\x1d\x42\x69\x25\xa6\x99\xc0\xa2\xac\xf9\x28\x46\xad\x61\xa7\x6d\x79\x98\x8b\xa2\x55\xeb\x1f\x5e\xd4\xaa\xaa\xb5\xaa\xea\xf0\x48\x61\x3c\x06\xdf\xea\xe9\xb2\x59\xc1\xfb\xdf\xe4\xaf\xa1\x24\x3b\xfe\x35\x31\xa0\x4b\x92\x2e\xf9\x13\x00\x00\xff\xff\x29\x0d\x34\x3e\xd4\x04\x00\x00")

func publicJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsScriptJs,
		"public/js/script.js",
	)
}

func publicJsScriptJs() (*asset, error) {
	bytes, err := publicJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/script.js", size: 1236, mode: os.FileMode(420), modTime: time.Unix(1476376470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/build.txt": publicBuildTxt,
	"public/index.html": publicIndexHtml,
	"public/css/styles.css": publicCssStylesCss,
	"public/js/script.js": publicJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"build.txt": &bintree{publicBuildTxt, map[string]*bintree{}},
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{publicCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{publicJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
