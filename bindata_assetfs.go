// Code generated by go-bindata.
// sources:
// public/index.html
// public/css/styles.css
// public/js/script.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x4f\x6f\x13\x3f\x10\xbd\xe7\x53\xb8\x3e\xfd\x7e\x42\x5e\x93\x22\x71\x88\x76\x83\x04\x54\x2a\x12\x08\xd4\xa6\x07\x4e\x95\xe3\x9d\xcd\xba\xf1\xda\xc6\x33\xdb\x26\xdf\x1e\xad\x77\x43\x93\xb0\xa5\x01\x0e\x9c\x92\xf9\xf7\x3c\xef\x8d\x3d\x9b\x9f\xbd\xff\xfc\x6e\xf1\xf5\xcb\x05\xab\xa9\xb1\xf3\xc9\x24\x3f\x13\x82\x55\x66\xd3\xc0\x8c\xa1\xaf\x88\x3d\x44\x15\x90\x09\xb1\x8b\x91\x2f\xfd\x8c\xe1\xd6\x91\xda\xb0\xda\xac\x6a\x6b\x56\x35\x19\xb7\x4a\x39\xfb\x29\xe0\x4a\xe6\x1d\x03\x47\x10\x99\xb6\x46\xaf\x59\x4d\x14\x66\x52\x22\x29\xbd\xf6\xf7\x10\x2b\xeb\x1f\x32\xed\x1b\xf9\xad\x05\x24\xe3\x1d\xca\xe9\xeb\x97\xd3\xe9\xab\xe9\xb9\x84\x0d\xe8\x96\x40\x54\xad\xd3\x5d\x48\x78\x27\x12\x96\x58\xc3\x76\x68\x68\xd7\x74\x0d\xaa\x9c\x4f\x18\x63\x2c\x27\x43\x16\xe6\x57\x17\xd7\x8b\xaa\xb5\x0b\x40\xca\x65\xef\x9a\xf4\x71\x6b\xdc\x9a\x45\xb0\x05\x47\xda\x5a\xc0\x1a\x80\x38\xab\x23\x54\x05\xd7\x88\xb2\xf7\x66\x1a\x91\x9f\x52\xd2\x31\xc2\x99\x94\x95\x77\x84\xd9\xca\xfb\x95\x05\x15\x0c\x26\x56\x46\x7b\xf7\xa6\x52\x8d\xb1\xdb\xe2\x93\x22\x88\x46\xd9\x17\x1f\xb4\x77\x1d\xf6\xc9\xd0\xda\x97\x90\xad\x80\x9a\xd2\x66\xc6\xcb\x69\x76\x9e\x4d\x65\x33\xc0\x65\x3e\x2a\xb7\x02\xb1\xb4\x2d\x64\x8d\x71\xa9\x71\x26\x77\xad\xa3\x8e\x26\x10\xc3\xa8\x0b\x7e\x87\xb2\x37\xb3\x3b\xe4\xf3\x7c\x30\xe6\x07\x89\x25\x54\x10\xfb\xf4\xd3\x8e\xef\x8e\x3c\x84\xcb\x65\x3f\x8d\x49\xbe\xf4\xe5\x76\x80\x2f\xcd\x3d\xd3\x56\x21\x16\x5c\x7b\x47\xca\x38\x88\x83\x06\x29\x5e\xf9\xd8\x3c\x9a\xc7\x25\x4d\x69\x05\xc1\x86\x2a\x03\xb6\x64\x9d\x75\x87\x8f\x0e\x7e\x58\x98\x8a\x8d\x0b\x2d\x8d\x96\xdf\xde\xa6\x18\x67\xb4\x0d\x50\xf0\xce\xcf\x99\x29\x0b\xde\x46\x3b\x86\x64\xd5\x12\xec\x13\x48\x29\xc6\x59\xe5\xe3\x50\x7e\x73\xf5\x31\x97\xc9\x7b\x44\x46\x96\xe6\x7e\x98\xc9\x18\x41\x0c\x4a\xc3\xd8\xe9\x7f\x23\xc2\xef\x09\xd1\xf5\x9f\x74\xe8\xa6\xf6\x14\xda\xa9\x62\xf4\x18\x6f\x7d\xb9\x1d\x95\xe3\x29\x49\xfe\x15\xe5\xee\xc2\x1e\xdc\xc7\x3f\x22\xbd\x43\xb9\x4c\xbf\xcf\x11\xff\x85\x2b\x97\xfd\x73\x98\x8c\x69\x92\xae\x0a\xd3\x69\x13\x1e\x75\x9c\x2f\x5b\x22\xef\xf6\x5b\x1d\x3c\x83\x74\x7b\x56\xff\x57\x88\xa8\x0c\xc2\x0f\x6d\xa3\x09\xc1\x82\x80\xaa\x02\x3d\x3c\x8b\x3e\x91\x33\xef\xd2\x0a\x2f\x78\xb7\xd7\xff\xfb\x7f\x44\xac\x6b\x70\xe5\x11\xad\xbe\x78\x9f\xd9\xe1\xd0\x9f\x7b\x03\x79\x88\x30\xa2\xe0\x99\x10\xd8\x86\x10\x01\x91\x5d\x52\x63\x6f\xdc\xda\xf9\x07\xb7\x50\xfd\x47\xe8\xa7\xfc\x4d\x13\x12\x97\x08\x18\xbc\x43\xe8\xd6\xd5\xa6\x09\xc7\x43\x38\x38\x6c\xbf\xd5\xe1\x7f\x2e\xfb\x8d\xd6\xad\xb8\xf4\xe1\xf9\x1e\x00\x00\xff\xff\xf1\x68\xee\x64\x3e\x07\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 1854, mode: os.FileMode(420), modTime: time.Unix(1476284724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicCssStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x41\x0e\x82\x30\x10\x45\xf7\x3d\xc5\xb8\x70\x67\x49\x35\x71\x83\x87\x21\x85\x8e\x30\x49\x3b\x6d\xea\x10\x31\xc6\xbb\x1b\x04\x89\x10\xb7\xf3\x5e\x7f\xff\x2f\x82\xf3\x5a\x70\x90\x2b\xa1\x77\x55\x45\x9c\x7a\x39\xa8\xed\xd9\xdb\x1a\xfd\xf6\x0c\x4f\x05\x00\x70\x27\x27\x5d\x09\x47\x63\xf6\xb0\xa3\x90\x62\x16\xcb\x72\x51\x2f\xa5\x8a\x26\xb2\x58\x62\xcc\xb3\x1b\x6c\x6e\x89\xb5\xc4\x34\x3e\xc8\x18\x26\xed\x96\x6c\x83\x7f\x94\xd3\x62\x34\xc8\xb2\xa4\x8c\x0d\xb4\xf5\xd4\x72\x09\x13\xf8\x48\x75\x74\x8f\x6f\x08\xb1\xee\x90\xda\x4e\x4a\x30\xab\x56\x3f\x7f\x8c\xc8\xf6\x12\x57\x7c\xc2\x83\x9e\x57\x9d\x0d\x86\xf5\xaa\x77\x00\x00\x00\xff\xff\xa1\xb7\xe9\xca\x32\x01\x00\x00")

func publicCssStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStylesCss,
		"public/css/styles.css",
	)
}

func publicCssStylesCss() (*asset, error) {
	bytes, err := publicCssStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/styles.css", size: 306, mode: os.FileMode(420), modTime: time.Unix(1476277546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x6b\xb4\x40\x0c\x86\xef\xfe\x8a\xe0\x45\x65\x65\xfe\xc0\x22\x1f\x7c\x20\xdd\x82\x7b\x29\x1e\x7a\x1d\x9c\x77\x5b\x61\x9a\xd1\x4c\x46\x5b\xca\xfe\xf7\xa2\xcb\x96\xbd\x34\xa7\x40\x92\xf7\x79\xc8\x25\xf1\xa0\x63\x60\x8a\x60\x57\x56\xf4\x9d\x11\x11\x2d\x56\x48\x30\x53\x43\x8c\x95\x5e\xcf\xdd\x49\x75\x7a\xc1\x9c\x10\xb5\xac\x8e\xd9\xbe\x24\x98\x4d\x98\xc0\x65\xf1\xd4\xf6\x45\x4d\xeb\xc8\x2e\xac\xc6\x87\xc1\x6e\x89\xe6\x5d\x70\x39\xe4\x72\xbb\xfa\x97\xc4\x37\xf9\xc1\x85\x21\x7d\x80\xd5\xbc\x41\x5b\x8f\xad\xfd\xff\xf5\xec\xca\x3c\x89\xcf\x2b\xb3\x58\x9f\x50\x93\x4a\xc2\x23\xc5\x3a\xd7\x2e\x60\xed\xc6\xa8\x60\x48\x59\xf8\x60\x5d\x51\xd3\xdd\xfe\x57\x7c\xab\x3f\x19\x82\x38\x05\x8e\xc8\x2b\x33\x32\x43\x4e\xfd\xb9\xa3\x66\x27\xdc\x47\x3d\x3e\x75\x0f\xba\x3e\xf2\x6f\xbf\x39\x66\xd7\xec\x27\x00\x00\xff\xff\xd4\xa9\xc5\x93\x2f\x01\x00\x00")

func publicJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsScriptJs,
		"public/js/script.js",
	)
}

func publicJsScriptJs() (*asset, error) {
	bytes, err := publicJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/script.js", size: 303, mode: os.FileMode(420), modTime: time.Unix(1476281367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
	"public/css/styles.css": publicCssStylesCss,
	"public/js/script.js": publicJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"styles.css": &bintree{publicCssStylesCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{publicJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
